/**
 * This function creates an overlay and adds a new contact to the database on mobile devices
 */
function addNewContactMobile() {
  const overlay = document.createElement("div");
  overlay.className = "overlay";
  overlay.innerHTML = HTMLForAddNewContactMobile();
  document.body.appendChild(overlay);
  document.body.style.overflow = "hidden";
}


/**
 * This function generates the HTML code for the "add new contact" pop up
 * @returns HTML code
 */
function HTMLForAddNewContactMobile() {
  return `
        <div class="overlay-add-contact-mobile transition-in-from-bottom">
            <div class="overlay-add-contact-mobile-top">
                <div class="close-icon-mobile-box">
                    <img class="close-icon-mobile" src="./img/close.svg" alt="" onclick="closeOverlay()">
                </div>
                <div style="display: flex; flex-direction: column; gap: 12px;">
                    <h1>Add contact</h1>
                    <p>Tasks are better with a team!</p>
                    <hr>
                </div>
                <div class="close-icon-mobile-box">
                    <img src="./img/close.svg" alt="" onclick="closeOverlay()">
                </div>
            </div>

            <div class="overlay-add-contact-mobile-mid">
                <div class="overlay-add-contact-profile-img-mobile">
                    <img src="./img/profile-pic-blank.svg" alt="Profile Picture Placeholder">
                </div>
            </div>

            <div class="overlay-add-contact-mobile-bottom">
              <div>
                <div>
                    <div class="input-fields-add-contact-mobile">
                        <div class="required-input">
                          <input id="name" style="background-image: url('./img/person-icon.svg');" type="text" placeholder="Name" required>
                          <div id="contactsNameRequired" class="required-input-msg d-none">This field is required.</div>
                        </div>
                        <div class="required-input">
                          <input id="email" style="background-image: url('./img/mail-icon.svg');" type="email" placeholder="E-Mail" required>
                          <div id="contactsEmailRequired" class="required-input-msg d-none">This field is required. Don't forget to add "@".</div>
                        </div>
                        <div class="required-input">
                          <input id="phone" style="background-image: url('./img/call-icon.svg');" type="number" placeholder="Phone" required>
                          <div id="contactsPhoneRequired" class="required-input-msg d-none">This field is required.</div>
                        </div>
                    </div>
                </div>
                <div class="buttons-add-contact">
                    <button class="create-contact-button-add-contact" onclick="addContactToDatabase()">Create contact <img src="./img/check.svg"></button>
                </div>
              </div>
            </div>
        </div>
    `;
}


/**
 * This function closes the overlay pop up
 */
function closeOverlay() {
  const overlay = document.querySelector(".overlay");
  if (overlay) {
    overlay.remove();
  }
  document.body.style.overflow = "auto";
}


/**
 * This function adds ones new contact to the database
 */
async function addContactToDatabase() {
    let required = contactsCheckRequired();

    if (required) {
      let contactName = document.getElementById("name").value;
    let contactEmail = document.getElementById("email").value;
    let contactPhone = document.getElementById("phone").value;
    const contactColor =
      colorArray[Math.floor(Math.random() * colorArray.length)];
  
    let data = {
      name: contactName,
      email: contactEmail,
      phone: contactPhone,
      color: contactColor, // Save the randomly chosen color
    };
  
    let response = await fetch(BASE_URL + "/contacts.json", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });
    let responseAsJson = await response.json();
    console.log(responseAsJson);
  
    document.getElementById("name").value = "";
    document.getElementById("email").value = "";
    document.getElementById("phone").value = "";
  
    loadContactsFromDatabase();
    closeOverlay();
    }   
  }
  
  
  /**
   * This function deletes ones contacts from the database
   *
   * @param {string} contactId - The contactId is automatically generated by your database
   */
  async function deleteContactFromDatabase(contactId) {
    let response = await fetch(BASE_URL + "/contacts/" + contactId + ".json", {
      method: "DELETE",
    });
    let responseAsJson = await response.json();
    console.log(responseAsJson);
  
    loadContactsFromDatabase();
    closeOverlay();
  }
  
  
  /**
   * This function edits ones contact in your database
   *
   * @param {string} contactId - The contactId is automatically generated by your database
   * @param {object} updatedData - The updatedData is the updated information/data of an existing contact (name, email, phone, and color)
   */
  async function editContactFromDatabase(contactId, updatedData) {
    let response = await fetch(BASE_URL + "/contacts/" + contactId + ".json", {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(updatedData),
    });
    let responseAsJson = await response.json();
    console.log(responseAsJson);
  
    updateContactInList(contactId, updatedData);
    showDetailedContact(contactId);
  }
  
  
  /**
   * This function edits a specific contact
   * @param {string} contactId - The contactId is automatically generated by your database
   * @param {string} name - The name of the updated contact
   * @param {string} email - The email of the updated contact
   * @param {number} phone - The phone number of the updated contact
   * @param {string} color - The background color for the contact's initials
   */
  function editContact(contactId, name, email, phone, color) {
    const overlay = document.createElement("div");
    overlay.className = "overlay";
    overlay.innerHTML = HTMLForEditContact(contactId, name, email, phone, color);
    document.body.appendChild(overlay);
    document.body.style.overflow = "hidden";
  }
  
  
  /**
   * This function generates the HTML code for the "edit contact" pop up
   * @param {string} contactId - The contactId is automatically generated by your database
   * @param {string} name - The name of the updated contact
   * @param {string} email - The email of the updated contact
   * @param {number} phone - The phone number of the updated contact
   * @param {string} color - The background color for the contact's initials
   * @returns HTML code
   */
  function HTMLForEditContact(contactId, name, email, phone, color) {
    const nameParts = name.split(" ");
    const firstLetter = nameParts[0] ? nameParts[0].charAt(0).toUpperCase() : "";
    const secondLetter = nameParts[1] ? nameParts[1].charAt(0).toUpperCase() : "";
  
    return `
          <div class="overlay-add-contact transition-in-from-right">
              <div class="overlay-add-contact-left">
                  <img src="./img/logo-big-desktop.svg">
                  <h1>Edit contact</h1>
                  <hr>
              </div>
  
              <div class="overlay-add-contact-right-box">
                  <div>
                      <img class="closeIcon" src="./img/close.svg" alt="" onclick="closeOverlay()">
                  </div>
  
                  <div class="overlay-add-contact-right">
                      <div class="contact-big-profile-img" style="background-color: ${color};">
                          <span>${firstLetter}${secondLetter}</span>
                      </div>
                      <div>
                          <div>
                              <form class="input-fields-add-contact">
                                  <input id="editName" style="background-image: url('./img/person-icon.svg');" type="text" value="${name}" placeholder="Name" required>
                                  <input id="editEmail" style="background-image: url('./img/mail-icon.svg');" type="email" value="${email}" placeholder="E-Mail" required>
                                  <input id="editPhone" style="background-image: url('./img/call-icon.svg');" type="number" value="${phone}" placeholder="Phone" required>
                              </form>
                          </div>
                          <div class="buttons-add-contact">
                              <button class="delete-button-add-contact" type="button" onclick="deleteContactFromDatabase('${contactId}')" formnovalidate="formnovalidate">Delete</button>
                              <button class="save-button-add-contact" type="button" onclick="saveEditedContact('${contactId}')">Save <img src="./img/check.svg"></button>
                          </div>
                      </div>
                  </div>
              </div>
          </div>
      `;
  }
  
  
  /**
   * This function edits a specific contact on mobile devices
   * @param {string} contactId - The contactId is automatically generated by your database
   * @param {string} name - The name of the updated contact
   * @param {string} email - The email of the updated contact
   * @param {number} phone - The phone number of the updated contact
   * @param {string} color - The background color for the contact's initials
   */
  function editContactMobile(contactId, name, email, phone, color) {
    closeOverlay();
    
    const overlay = document.createElement("div");
    overlay.className = "overlay";
    overlay.innerHTML = HTMLForEditContactMobile(contactId, name, email, phone, color);
    
    document.body.appendChild(overlay);
    document.body.style.overflow = "hidden";
  }
  
  
  /**
   * This function generates the HTML code for the "edit contact" pop up on mobile devices
   * @param {string} contactId - The contactId is automatically generated by your database
   * @param {string} name - The name of the updated contact
   * @param {string} email - The email of the updated contact
   * @param {number} phone - The phone number of the updated contact
   * @param {string} color - The background color for the contact's initials
   * @returns HTML code
   */
  function HTMLForEditContactMobile(contactId, name, email, phone, color) {
    const nameParts = name.split(" ");
    const firstLetter = nameParts[0] ? nameParts[0].charAt(0).toUpperCase() : "";
    const secondLetter = nameParts[1] ? nameParts[1].charAt(0).toUpperCase() : "";
  
    return `
          <div class="overlay-add-contact-mobile transition-in-from-bottom">
              <div class="overlay-add-contact-mobile-top">
                  <div class="close-icon-mobile-box">
                      <img class="close-icon-mobile" src="./img/close.svg" alt="" onclick="closeOverlay()">
                  </div>
                  <div style="display: flex; flex-direction: column; gap: 12px;">
                      <h1>Edit contact</h1>
                      <hr>
                  </div>
                  <div class="close-icon-mobile-box">
                      <img src="./img/close.svg" alt="" onclick="closeOverlay()">
                  </div>
              </div>
  
              <div class="overlay-add-contact-mobile-mid">
                  <div class="overlay-add-contact-profile-img-mobile" style="background-color: ${color};">
                      <span>${firstLetter}${secondLetter}</span>
                  </div>
              </div>
  
              <div class="overlay-add-contact-mobile-bottom">
                  <div>
                      <div>
                          <form class="input-fields-add-contact-mobile">
                              <input id="editNameMobile" style="background-image: url('./img/person-icon.svg');" type="text" value="${name}" placeholder="Name">
                              <input id="editEmailMobile" style="background-image: url('./img/mail-icon.svg');" type="email" value="${email}" placeholder="E-Mail">
                              <input id="editPhoneMobile" style="background-image: url('./img/call-icon.svg');" type="number" value="${phone}" placeholder="Phone">
                          </form>
                      </div>
                      <div class="buttons-add-contact">
                          <button class="delete-button-add-contact" type="button" onclick="deleteContactFromDatabase('${contactId}')">Delete</button>
                          <button class="save-button-add-contact" type="button" onclick="saveEditedContactMobile('${contactId}')">Save <img src="./img/check.svg"></button>
                      </div>
                  </div>
              </div>
          </div>
      `;
  }
  
  
  /**
   * This function saves the edited contact
   * @param {string} contactId - The contactId is automatically generated by your database
   */
  function saveEditedContact(contactId) {
    let newName = document.getElementById("editName").value;
    let newEmail = document.getElementById("editEmail").value;
    let newPhone = document.getElementById("editPhone").value;
    let color = document.querySelector(".contact-big-profile-img").style
      .backgroundColor; // Fetch the current color
  
    if (newName && newEmail && newPhone) {
      let updatedData = {
        name: newName,
        email: newEmail,
        phone: newPhone,
        color: color, // Include color in updated data
      };
      editContactFromDatabase(contactId, updatedData);
      closeOverlay();
    }
  }
  

  /**
     * This function saves the edited contact on mobile devices
     * @param {string} contactId - The contactId is automatically generated by your database
     */
  function saveEditedContactMobile(contactId) {
    let newName = document.getElementById("editNameMobile").value;
    let newEmail = document.getElementById("editEmailMobile").value;
    let newPhone = document.getElementById("editPhoneMobile").value;
    let color = document.querySelector(".contact-big-profile-img-mobile").style.backgroundColor; // Fetch the current color

    if (newName && newEmail && newPhone) {
      let updatedData = {
        name: newName,
        email: newEmail,
        phone: newPhone,
        color: color, // Include color in updated data
      };
      editContactFromDatabase(contactId, updatedData);
      closeOverlay();
    }
  }

  
  /**
   * This function updates a single contact in the contact list without clearing the detailed view
   *
   * @param {string} contactId - The contactId is automatically generated by your database
   * @param {object} updatedData - The updated information/data of an existing contact (name, email and phone)
   */
  async function updateContactInList(contactId, updatedData) {
    let contactBox = document.querySelector(
      `.single-contact-box[onclick="showDetailedContact('${contactId}')"]`
    );
  
    if (contactBox) {
      const newContactHTML = HTMLForContactCard({
        id: contactId,
        ...updatedData,
      });
      contactBox.outerHTML = newContactHTML;
    }
  }
  