/*
const BASE_URL = "https://join-7b4c8-default-rtdb.europe-west1.firebasedatabase.app/";
*/

var colorArray = [
  "#FF7A00", "#FF5EB3", "#6E52FF",
  "#9327FF", "#00BEE8", "#1FD7C1",
  "#FF745E", "#FFA35E", "#FC71FF",
  "#FFC701", "#0038FF", "#C3FF2B",
  "#FFE62B", "#FF4646", "#FFBB2B",
];


loadContactsFromDatabase();


/**
 * This function loads ones contacts from the database
 *
 * @param {string} path - This is the path leading to your contacts at your database
 */
async function loadContactsFromDatabase(path = "/contacts") {
  let response = await fetch(BASE_URL + path + ".json");
  let data = await response.json();
  renderContacts(data);
}


/**
 * This function renders ones contacts out of the database
 *
 * @param {object} contacts - All your contacts (name, email and phone) in your database
 */
function renderContacts(contacts) {
  let contactList = document.getElementById("contact-list");
  contactList.innerHTML = "";
  document.getElementById("contact-detailed").innerHTML = "";
  document.getElementById("contact-detailed-mobile").innerHTML = "";

  if (contacts) {
    let sortedContacts = Object.keys(contacts)
      .map((id) => ({
        id,
        ...contacts[id],
      }))
      .sort((a, b) => a.name.localeCompare(b.name));

    let groupedContacts = sortedContacts.reduce((groups, contact) => {
      let firstLetter = contact.name.charAt(0).toUpperCase();
      if (!groups[firstLetter]) {
        groups[firstLetter] = [];
      }
      groups[firstLetter].push(contact);
      return groups;
    }, {});

    for (let letter in groupedContacts) {
      contactList.innerHTML += `
                <div class="alphabetical-numbering">
                    <span>${letter}</span>
                </div>
                <hr>
                `;
      groupedContacts[letter].forEach((contact) => {
        contactList.innerHTML += HTMLForContactCard(contact);
      });
    }
  }
}


/**
 * This function generates the HTML for a single contact card
 *
 * @param {object} contact - The contact object containing name, email, phone, and color
 * @returns {string} - The HTML string for the contact card
 */
function HTMLForContactCard(contact) {
  const nameParts = contact.name.split(" ");
  const firstLetter = nameParts[0] ? nameParts[0].charAt(0).toUpperCase() : "";
  const secondLetter = nameParts[1] ? nameParts[1].charAt(0).toUpperCase() : "";

  const backgroundColor = contact.color || "#000";

  return `
        <div onclick="showDetailedContact('${contact.id}', '${backgroundColor}')" class="single-contact-box">
            <div class="single-contact-box-profile-img" style="background-color: ${backgroundColor};">
                <span>${firstLetter}${secondLetter}</span>
            </div>
            <div class="single-contact-box-content">
                <span>${contact.name}</span>
                <a href="mailto:${contact.email}">${contact.email}</a>
            </div>
        </div>
    `;
}


/**
 * This function checks if a contact is selected or not and shows one via backgroundcolor
 * 
 * @param {string} contactId - The contactId is automatically generated by your database
 */
function updateSelectedContact(contactId) {
  let contactBoxes = document.querySelectorAll(".single-contact-box");

  contactBoxes.forEach((contactBox) => {
    if (contactBox.getAttribute("onclick").includes(contactId)) {
      contactBox.classList.add("selected");
    } else {
      contactBox.classList.remove("selected");
    }
  });
}


/**
 * This function fetches and displays the detailed contact information
 *
 * @param {string} contactId - The contactId is automatically generated by your database
 * @param {string} backgroundColor - The backgroundColor which was set for a specific contact
 */
async function showDetailedContact(contactId, backgroundColor) {
  let response = await fetch(BASE_URL + "/contacts/" + contactId + ".json");
  let detailedContact = await response.json();
  detailedContact.id = contactId;

  if (window.innerWidth < 1150) {
    document.getElementById("detailedcontactmobile").classList.remove("d-none");
    document.getElementById("detailedcontactmobile").classList.add("contact-section-content-mobile");
    document.getElementById("contactlist").classList.remove("contact-section");
    document.getElementById("contactlist").classList.add("d-none");
    document.getElementById("contact-detailed-mobile").innerHTML = HTMLForDetailedContactMobile(detailedContact, backgroundColor);

    let container = document.getElementById("detailedcontactmobile");
    container.setAttribute("data-contact-id", detailedContact.id);
    container.setAttribute("data-contact-name", detailedContact.name);
    container.setAttribute("data-contact-email", detailedContact.email);
    container.setAttribute("data-contact-phone", detailedContact.phone);
    container.setAttribute("data-contact-backgroundcolor", detailedContact.backgroundColor);
  } else {
    document.getElementById("contact-detailed").innerHTML = HTMLForDetailedContact(detailedContact, backgroundColor);
  }

  updateSelectedContact(contactId);
}


/**
 * This function generates the HTML for the detailed contact view
 *
 * @param {object} detailedContact - The detailed contact object containing name, email, phone, and color
 * @returns {string} - The HTML string for the detailed contact view
 */
function HTMLForDetailedContact(detailedContact) {
  const nameParts = detailedContact.name.split(" ");
  const firstLetter = nameParts[0] ? nameParts[0].charAt(0).toUpperCase() : "";
  const secondLetter = nameParts[1] ? nameParts[1].charAt(0).toUpperCase() : "";
  const backgroundColor = detailedContact.color || "#000";

  return `
        <div style="display: flex; align-items: center; gap: 54px;">
            <div class="contact-big-profile-img" style="background-color: ${backgroundColor};">
                <span>${firstLetter}${secondLetter}</span>
            </div>
            <div>
                <h2>${detailedContact.name}</h2>
                <div style="display: flex; justify-content: space-between; width: 159px;">
                    <div onclick="editContact('${detailedContact.id}', '${detailedContact.name}', '${detailedContact.email}', '${detailedContact.phone}', '${backgroundColor}')" class="contact-big-icon">
                        <img src="./img/edit-icon-contact.svg" alt="">
                        <span>Edit</span>
                    </div>
                    <div onclick="deleteContactFromDatabase('${detailedContact.id}')" class="contact-big-icon">
                        <img src="./img/delete-icon-contact.svg" alt="">
                        <span>Delete</span>
                    </div>
                </div>
            </div>
        </div>
        <div style="height: 74px; display: flex; align-items: center; font-size: 20px;">
            <span>Contact Information</span>
        </div>
        <div class="contact-big-info">
            <span>Email</span>
            <a href="mailto:${detailedContact.email}">${detailedContact.email}</a>
            <span>Phone</span>
            <a style="color: black;" href="tel:${detailedContact.phone}">${detailedContact.phone}</a>
        </div>
    `;
}


/**
 * This function generates the HTML for the detailed contact view on mobile devices
 *
 * @param {object} detailedContact - The detailed contact object containing name, email, phone, and color
 * @returns {string} - The HTML string for the detailed contact view on mobile devices
 */
function HTMLForDetailedContactMobile(detailedContact) {
  const nameParts = detailedContact.name.split(" ");
  const firstLetter = nameParts[0] ? nameParts[0].charAt(0).toUpperCase() : "";
  const secondLetter = nameParts[1] ? nameParts[1].charAt(0).toUpperCase() : "";
  const backgroundColor = detailedContact.color || "#000"; // Default to black if no color is provided

  return `
        <div style="display: flex; align-items: center; gap: 20px;">
            <div class="contact-big-profile-img-mobile" style="background-color: ${backgroundColor};">
                <span>${firstLetter}${secondLetter}</span>
            </div>
            <div>
                <h2>${detailedContact.name}</h2>
            </div>
        </div>
        <div>
            <span>Contact Information</span>
        </div>
        <div class="contact-big-info">
            <span>Email</span>
            <a href="mailto:${detailedContact.email}">${detailedContact.email}</a>
            <span>Phone</span>
            <a style="color: black;" href="tel:${detailedContact.phone}">${detailedContact.phone}</a>
        </div>
    `;
}


/**
 * This function closes the detailed contact view on mobile devices
 */
function closeDetailedContactMobile() {
  document.getElementById("detailedcontactmobile").classList.add("d-none");
  document
    .getElementById("detailedcontactmobile")
    .classList.remove("contact-section-content-mobile");
  document.getElementById("contactlist").classList.add("contact-section");
  document.getElementById("contactlist").classList.remove("d-none");
}


/**
 * This function toggles the contact menu on mobile devices
 */
function toggleContactMenu() {
  let container = document.getElementById("detailedcontactmobile");

  let contactId = container.getAttribute("data-contact-id");
  let contactName = container.getAttribute("data-contact-name");
  let contactEmail = container.getAttribute("data-contact-email");
  let contactPhone = container.getAttribute("data-contact-phone");

  let menuContainer = document.getElementById("mobileContactMenu");
  menuContainer.addEventListener("click", function () {
    editContactMobile(contactId, contactName, contactEmail, contactPhone);
  });

  document.querySelector(".contact-big-mobile-option-button").classList.toggle("contact-big-mobile-overlay-menu-active");
  document.getElementById("mobileContactMenu").classList.toggle("show-contact-big-mobile-overlay-menu");
  document.getElementById("mobileContactMenu").classList.toggle("d-none");
  document.getElementById("mobileContactMenu").classList.toggle("d-flex");
}


/**
 * This function checks if all required fields are filled out
 * @returns false or true
 */
function contactsCheckRequired() {
  let requiredName = false;
  let requiredEmail = false;
  let requiredPhone = false;

  if (document.getElementById("name").value == "") {
    document.getElementById("name").classList.add("red-border");
    document.getElementById("contactsNameRequired").classList.remove("d-none");
  } else if (!document.getElementById("name").value == "") {
    document.getElementById("name").classList.remove("red-border");
    document.getElementById("contactsNameRequired").classList.add("d-none");
    requiredName = true;
  }

  const emailValue = document.getElementById("email").value;

  if (emailValue == "" || !emailValue.includes("@")) {
    document.getElementById("email").classList.add("red-border");
    document.getElementById("contactsEmailRequired").classList.remove("d-none");
  } else if (!document.getElementById("email").value == "") {
    document.getElementById("email").classList.remove("red-border");
    document.getElementById("contactsEmailRequired").classList.add("d-none");
    requiredEmail = true;
  }

  if (document.getElementById("phone").value == "") {
    document.getElementById("phone").classList.add("red-border");
    document.getElementById("contactsPhoneRequired").classList.remove("d-none");
  } else if (!document.getElementById("phone").value == "") {
    document.getElementById("phone").classList.remove("red-border");
    document.getElementById("contactsPhoneRequired").classList.add("d-none");
    requiredPhone = true;
  }

  let required = false;

  if (requiredName && requiredEmail && requiredPhone) {
    required = true;
  }
  return required;
}


/**
 * This function creates an overlay and adds a new contact to the database
 */
function addNewContact() {
  const overlay = document.createElement("div");
  overlay.className = "overlay";
  overlay.innerHTML = HTMLForAddNewContact();
  document.body.appendChild(overlay);
  document.body.style.overflow = "hidden";
}


/**
 * This function generates the HTML code for the "add new contact" pop up
 * @returns HTML code
 */
function HTMLForAddNewContact() {
  return `
        <div class="overlay-add-contact transition-in-from-right">
            <div class="overlay-add-contact-left">
                <img src="./img/logo-big-desktop.svg">
                <h1>Add contact</h1>
                <p>Tasks are better with a team!</p>
                <hr>
            </div>

            <div class="overlay-add-contact-right-box">
                <div>
                    <img class="closeIcon" src="./img/close.svg" alt="" onclick="closeOverlay()">
                </div>

                <div class="overlay-add-contact-right">
                    <div>
                        <img class="profile-icon-img" src="./img/profile-pic-blank.svg" alt="Profile Picture Placeholder">
                    </div>
                    <div>
                        <div>
                            <div class="input-fields-add-contact">
                              <div class="required-input">
                                <input id="name" style="background-image: url('./img/person-icon.svg');" type="text" placeholder="Name" required>
                                <div id="contactsNameRequired" class="required-input-msg d-none">This field is required.</div>
                              </div>
                              <div class="required-input">
                                <input id="email" style="background-image: url('./img/mail-icon.svg');" type="email" placeholder="E-Mail" required>
                                <div id="contactsEmailRequired" class="required-input-msg d-none">This field is required. Don't forget to add "@".</div>
                              </div>
                              <div class="required-input">
                                <input id="phone" style="background-image: url('./img/call-icon.svg');" type="number" placeholder="Phone" required>
                                <div id="contactsPhoneRequired" class="required-input-msg d-none">This field is required.</div>
                              </div>
                            </div>
                        </div>
                        <div class="buttons-add-contact">
                            <button class="cancel-button-add-contact" onclick="closeOverlay()" formnovalidate="formnovalidate">Cancel <img src="./img/close.svg"></button>
                            <button class="create-contact-button-add-contact" onclick="addContactToDatabase()">Create contact <img src="./img/check.svg"></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
}